# https://github.com/nginxinc/NGINX-Demos/tree/master/oauth2-token-introspection-oss
# https://www.nginx.com/blog/harnessing-power-convenience-of-javascript-for-each-request-with-nginx-javascript-module/
# https://github.com/xeioex/njs-examples
load_module modules/ngx_http_js_module.so;

events {}

http {
  error_log /var/log/nginx/error.log info; # info - чтобы из js логгировать
  js_import main from conf.d/auth.js; # import Class as Alias

  proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;

  upstream auth {
      server host.docker.internal:8080;
  }

  upstream demo {
      server host.docker.internal:8080;
  }

  server {
    listen 80;
    listen [::]:80;
    server_name localhost;

    proxy_intercept_errors on;     # Do not send backend errors to the client
    default_type application/json; # If no content-type then assume JSON

    location /api/auth {
      # запросы на /auth не проксируем
      proxy_pass http://auth/api/auth;
    }

    location = /api/_auth_token {
      internal;
      # будет выполняться скрипт
      js_content main.authToken;
    }

    # проксирование запроса на auth service
    location = /_auth_token_request {
      internal;
      gunzip on;
      proxy_method            POST;
      proxy_pass              http://auth;
      proxy_pass_request_body off;
      proxy_set_header        Content-Length "";
      proxy_set_header        X-Original-URI $request_uri;

      proxy_cache             token_responses; # Enable caching of token introspection responses
      proxy_cache_key         $http_authorization; # Cache the response for each unique access token
      proxy_cache_lock        on; # Don't allow simultaneous requests for same token
      proxy_cache_valid       200 120s; # How long to use cached introspection responses
      proxy_cache_use_stale   error timeout; # Use old responses if we cannot reach the server
      proxy_ignore_headers    Cache-Control Expires Set-Cookie; # Cache even when receiving these
    }

    location /api/demo { # /api/demo/**
      auth_request /api/_auth_token; # 2xx -> ok, 4xx -> not ok
      # берёт из ответа proxy response header X-Profile
      # создаём локальную переменную $profile
      auth_request_set $profile $sent_http_x_profile;
      # proxy_set_header(X-Profile, $profile)
      proxy_set_header X-Profile $profile;
      proxy_pass http://demo/api/demo;
    }

    error_page 400 = @400;
    location @400 { return 400 '{"status":400,"message":"Bad request"}'; }

    error_page 401 = @401;
    location @401 { return 401 '{"status":401,"message":"Unauthorized"}'; }

    error_page 403 = @403;
    location @403 { return 403 '{"status":403,"message":"Forbidden"}'; }

    error_page 404 = @404;
    location @404 { return 404 '{"status":404,"message":"Resource not found"}'; }
  }
}